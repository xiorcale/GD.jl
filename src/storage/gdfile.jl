"""
    GDFile(hashes, deviations, padsize)

Data structure holding the compressed representation of data generated by a
compressor. Suitable for storing (through serialization) or exchanging over 
the network.
"""
mutable struct GDFile
    hashes::Vector{Vector{UInt8}}
    deviations::Vector{Vector{UInt8}}
    padsize::Int
end


"""
    diff(x, y)

Compute the difference between `x` and `y`, and return either the `x` if they
are different or `[0x00]` if they are the same.
"""
diff(x::Vector{UInt8}, y::Vector{UInt8}) = (x == y ? [0x00] : x)


"""
    patch(gdfile1, gdfile2)

Patches `gdfile1` by replacing the hashes/deviations which are the same as
`gdfile2` by `0x00`.
"""
function patch(gdfile1::GDFile, gdfile2::GDFile)::GDFile
    hashes = diff.(gdfile1.hashes, gdfile2.hashes)
    deviations = diff.(gdfile1.deviations, gdfile2.deviations)
    return GDFile(hashes, deviations, gdfile1.padsize)
end


"""
    unpatch(gdfile1, gdfile2)

Unpachtes `gdfile1` by repalcing `[0x00]` from `gdfile1` by the value contianed
in `gdfile2`.
"""
function unpatch(gdfile1::GDFile, gdfile2::GDFile)::GDFile
    hashes = deepcopy(gdfile1.hashes)
    deviations = deepcopy(gdfile1.deviations)

    for i in 1:length(hashes)
        if hashes[i] == [0x00]
            hashes[i] = gdfile2.hashes[i]
        end
        if deviations[i] == [0x00]
            deviations[i] = gdfile2.deviations[i]
        end
    end

    return GDFile(hashes, deviations, gdfile1.padsize)
end
