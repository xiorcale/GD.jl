"""
    Store(compressor, database)

Unifies the `Compressor` module and the database. The `Store` handles the
deduplication process by storing the bases generated by the `Compressor` into
the `database`.
"""
mutable struct Store
    compressor::Compressor
    database::Dict{Vector{UInt8}, Vector{UInt8}}
end


"""
    update!(store, hashes}, bases)

Updates `store.database` by mapping `hashes` to `bases`.
"""
function update!(s::Store, hashes::Vector{Vector{UInt8}}, bases::Vector{Vector{UInt8}})
    @inbounds for (h, b) âˆˆ zip(hashes, bases)
        s.database[h] = b
    end
end


"""
    compress!(store, data)

Stores the bases generated from `data` into the `database` and returns a
compressed version of `data` as a `GDFile`.
"""
function compress!(store::Store, data::Vector{T})::GDFile where T <: Unsigned
    gdfile, bases = compress(store.compressor, data)
    update!(store, gdfile.hashes, bases)
    return gdfile
end


"""
    extract(store, gdfile)

Decompresses the `gdfile` into its original representation. This methods assumes
that a valide `GDFile` is given as input (the `validate()` method must return 
`[]`).
"""
function extract(store::Store, gdfile::GDFile)::Vector
    bases = get(store, gdfile.hashes)
    return extract(store.compressor, gdfile, bases)
end


"""
    validate(store, gdfile)

Checks wether `gdfile` can be extracted by `store` or not by returning the list 
of unknown hashes used by `gdfile`. The `GDFile` is said valid if `validate()`
returns `[]`.
"""
function validate(store::Store, gdfile::GDFile)::Vector{Vector{UInt8}}
    return setdiff(gdfile.hashes, keys(store.database))
end


"""
    get(store, hashes)

returns the values mapped to `hashes` in `store`.
"""
function get(store::Store, hashes::Vector{Vector{UInt8}})::Vector{Vector{UInt8}}
    return [store.database[hash] for hash in hashes]
end
