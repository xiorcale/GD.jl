"""
    Compressor(chunksize, transformer, fingerprint)

Compress/Extract data according to the loaded configuration. A `Compressor` is
stateless. It is focused on data compression/extraction but does not store any
value for deduplication.
"""
mutable struct Compressor{T1 <: Integer, T2 <:AbstractTransformer}
    chunksize::T1
    transformer::T2
    fingerprint::Function
end

"""
    GDFile(hashes, deviations, padsize)

Data structure holding the compressed representation of data generated by a
compressor. Suitable for storing or exchanging over network.
"""
struct GDFile{T <: Integer}
    hashes::Vector{Vector{UInt8}}
    deviations::Vector{Vector{UInt8}}
    padsize::T
end


"""
    hash(compressor::Compressor, data::Vector{Vector{UInt8}})

Hash each element in `data` with the `compressor.fingerprint` and return an
array of hashes.
"""
function hash(compressor::Compressor, data::Vector{Vector{UInt8}})
    return compressor.fingerprint.(data)
end

"""
    compress(compressor::Compressor, data::Vector{UInt8})

Return a compressed version of `data`, as well as the bases which need to be
sotred by `compressor` for reconstructing `data`. 
"""
function compress(compressor::Compressor, bytes::Vector{UInt8})
    chunkarray = ChunkArray(bytes, compressor.chunksize)
    bases = similar(chunkarray, Vector{UInt8})
    deviations = similar(chunkarray, Vector{UInt8})
    for (i, chunk) âˆˆ enumerate(chunkarray)
        bases[i], deviations[i] = transform(compressor.transformer, chunk)
    end

    return GDFile(hash(compressor, bases), deviations, chunkarray.padsize), bases
end

"""
    extract(compressor::Compressor, bases::Vector{UInt8}, file::GDFile)

Decompress `file` into its original representation.
"""
function extract(compressor::Compressor, bases::Vector{Vector{UInt8}}, file::GDFile)
    bytes = reduce(vcat, [
        invtransform(compressor.transformer, b, d)
        for (b, d) in zip(bases, file.deviations)
    ])
    return bytes[1:end-file.padsize]
end
